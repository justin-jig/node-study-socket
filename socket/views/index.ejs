<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <script src="/socket.io/socket.io.js"></script>
        <title>Document</title>
    </head>
    <style>
        .chat-body {
            background-color: skyblue;
        }
        .chat-body > .msg-box {
            height: 500px; overflow: auto;
            overflow-x: hidden; padding: 0.8em;
        }
        .chat-body > .msg-box > div {
            display: flex;   align-items: center;
        }
        .chat-body > .msg-box > div > p {
            height: 20px; border-radius: 8px;
            padding: 0.4em 0.6em; font-size: 0.8em;
            margin: 0.5em 0;
        }

        .chat-body > .msg-box > .join-member {
            justify-content: center;
        }
        .chat-body > .msg-box > .join-member > p {
            text-align: center; font-size: blue;
        }

        .chat-body > .msg-box > .my-chat {
            justify-content: flex-end;
        }
        .chat-body > .msg-box > .my-chat > p {
            background-color: rgb(228, 174, 75); 
        }
        .chat-body > .msg-box > .other-chat {
            justify-content: flex-start;
        }
        .chat-body > .msg-box > .other-chat > p {
            background-color: #fff; 
        }
        .chat-body > form {
            display: flex;
            justify-content: space-between;
        }
        .chat-body > form > select {
            width: 15%;
        }
        .chat-body > form > input { 
            width: 67%;
        }
        .chat-body > form > button { 
            width: 15%;
        }
    </style>

    <body>
        <div id="main">
            <form id="room">
                <input type="text" id="roomName" placeholder="채팅방 만들기" />
                <input
                    type="text"
                    id="userName"
                    placeholder="사용자 이름 입력"
                />
                <button>만들기</button>
            </form>
            <ul id="lists"></ul>
        </div>
        <div class="chat-body" id="body" hidden>
            <div class="msg-box" id="msg">
                <!-- <div class="my-chat">
                    <p>채팅테스트(나)</p>
                </div>
                <div class="other-chat">
                    <p>채팅테스트(상대방)</p>
                </div> -->
            </div>
            <form id="chat">
                <select id="userList"></select>
                <input type="text" id="message" placeholder="메세지 입력" />
                <button>입력</button>
            </form>
        </div>

        <script>
            const socket = io();
            const roomForm = document.querySelector("#room");
            const chatForm = document.querySelector("#chat");
            const msg = document.querySelector("#msg");

            let myNam;
            //룸리스트
            socket.on("roomList", (roomLists) => {
                console.log(roomLists);
                const lists = document.querySelector("#lists");
                lists.textContent = "";
                roomLists.forEach((roomList) => {
                    const li = document.createElement("li");
                    li.textContent = `${roomList} 와 닉네임 입력 후 입장`;
                    lists.appendChild(li);
                });
            });

            //사용자 리스트
            socket.on("userList", (userLists) => {
                console.log(userLists);
                const lists = document.querySelector("#userList");
                lists.textContent = "";
                let options = `<option value="all">전체</option>`;
                for (let key in userLists) {
                    options += `<option value="${key}">${userLists[key]}</option>`;
                }
                lists.innerHTML = options;
            });


            socket.on("newMember", (nick) => {
                console.log('newMember', nick )
                const div = document.createElement("div");
                const p = document.createElement("p");
                if (myNam != nick) {
                    div.classList.add('join-member');
                    p.innerText = `${nick}님이 입장하셨습니다.`;
                    div.appendChild(p);
                    msg.appendChild(div);
                }
            });

            //메세지 띄우기
            socket.on("newMessage", (message, nick) => {
                console.log('newMessage', message, nick);
                const div = document.createElement("div");
                const p = document.createElement("p");
                if (myNam === nick) {
                    // 내가 입력한 텍스트
                    div.classList.add('my-chat');
                } else {
                    div.classList.add('other-chat');
                }
                //채팅 텍스트
                p.textContent = `${nick} : ${message}`;    
                div.appendChild(p);
                msg.appendChild(div);
            });

            socket.on("newSecretMessage", (message, nick, who) => {
                console.log('newSecretMessage', message, nick);
                const div = document.createElement("div");
                const p = document.createElement("p");
                if (myNam === nick) {
                    // 내가 입력한 텍스트
                    div.classList.add('my-chat');
                    p.textContent = `(속닥속닥) ${who}에게 : ${message}`; 
                } else {
                    div.classList.add('other-chat');
                    p.textContent = `(속닥속닥) ${who} : ${message}`; 
                }
                //채팅 텍스트
               
                div.appendChild(p);
                msg.appendChild(div);
            });

            ///폼 이벤트
            roomForm.addEventListener("submit", (e) => {
                e.preventDefault();
                const roomName = roomForm.querySelector("#roomName");
                const userName = roomForm.querySelector("#userName");
                if (roomName.value === "" || userName.value === "") {
                    alert("방이름과 닉네임 적어주세요");
                    return;
                }
                socket.emit("create", roomName.value, userName.value, () => {
                    const main = document.querySelector("#main");
                    const body = document.querySelector("#body");
                    main.hidden = true;
                    body.hidden = false;
                    // 전역변수에 입력한닉네임 저장
                    myNam = userName.value;
                });
            });
            chatForm.addEventListener("submit", (e) => {
                e.preventDefault();
                const user = document.querySelector("#userList");
                const message = document.querySelector("#message");
                console.log(user.value);
                const msg = {
                    nick : myNam,
                    user: user.value,
                    message: message.value,
                };
                socket.emit("sendMessage", msg);
            });
        </script>
    </body>
</html>
